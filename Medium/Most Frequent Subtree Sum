/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    unordered_map<int, int> umap;
public:
   int dfs(TreeNode* root) {
       if(root == NULL)
           return 0;
       int left = dfs(root->left);
       int right = dfs(root->right);
       int tot = root->val + left + right;
       if(umap[tot] != 0)
           umap[tot]++;
       else 
           umap[tot] = 1;
       return tot;
   }
    vector<int> findFrequentTreeSum(TreeNode* root) {
       if(root == NULL) 
           return {};
        dfs(root);
        int max_one = 0;
        int id;
        for(auto it = begin(umap); it != end(umap); it++) {
            if(it->second > max_one) {
               max_one = it->second;
               id = it->first;
            }
               
        }
        vector<int> ans;
        for(auto it = begin(umap); it != end(umap); it++) {
            if(it->second >= max_one) {
               ans.push_back(it->first);
            }
               
        }
       return ans;
    }
};
