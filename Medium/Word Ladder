class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        unordered_map<string, unordered_set<string>> adj;
        unordered_set<string> dict(wordList.begin(), wordList.end());
        // using bfs 
        unordered_map<string, int> visited;
        queue<string> q;
        q.push(beginWord);
        visited[beginWord] = 0;
        while(!q.empty()) {
            string take = q.front();
            q.pop();
            string temp = take;
            for(int i = 0; i < take.size(); i++) {
                  for(char ch  = 'a'; ch <= 'z'; ch++) {
                      if(temp[i] == ch)
                          continue;
                      temp[i] = ch;
                      if(dict.count(temp)) {
                          if(!visited.count(temp)) {
                              visited[temp] = visited[take] + 1;
                              q.push(temp);
                              adj[take].insert(temp);
                          }
                          else if(visited[temp] == visited[take] + 1)
                              adj[take].insert(temp);
                      }
                  }
                temp[i] = take[i];
            }
        }
          return visited[endWord] == 0 ? 0 : visited[endWord] + 1;
        
    }
};
