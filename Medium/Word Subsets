class Solution {
public:
    const int WORD_SIZE = 1e4+5;
    vector<string> wordSubsets(vector<string>& words1, vector<string>& words2) {
        
        int s1 = words1.size();
        int s2 = words2.size();
        unordered_map<string, map<char, int>> mp;
        for(int i = 0; i < s1; i++) {
            string s = words1[i];
            for(int j = 0; j < s.size(); j++) {
                mp[s][s[j]]++;
            }
        }
        unordered_map<char, int> mp2;
        for(int i = 0; i < s2; i++) {
            string s = words2[i];
            map<char, int> tmp;
            for(int j = 0; j < s.size(); j++) {
                 tmp[s[j]]++;
                 mp2[s[j]] = max(mp2[s[j]], tmp[s[j]]);
            }
            
            
        }
        vector<string> ans;
    
        for(auto it = mp.begin(); it != mp.end(); it++) {
            bool not_universal = false;
            map<char, int> check = it->second;
            for(auto sub_it = mp2.begin(); sub_it != mp2.end(); sub_it++) {
                if (sub_it->second > mp[it->first][sub_it->first]) {
                    not_universal = true; 
                    break;
                }
            }
            if (!not_universal) ans.push_back(it->first);
        } 
        return ans;
    }
    
};
