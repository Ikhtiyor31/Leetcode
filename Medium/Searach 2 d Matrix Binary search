//https://leetcode.com/explore/challenge/card/october-leetcoding-challenge/561/week-3-october-15th-october-21st/3497/
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        if(matrix.empty() || matrix[0].empty())
            return false;
        
        int n = matrix.size();
        int m = matrix[0].size();
        int r = n - 1;
        int l = 0;
        int mid;
        while(l <= r) {
             mid = l + (r - l) / 2;
            if(matrix[mid][0] > target && matrix[mid][m-1] > target) {
                r = mid - 1;
            } else if(matrix[mid][0] < target && matrix[mid][m-1] < target) {
                l = mid + 1;
            } else {
                  break;
            }
        }
        int indx = mid;
        mid = 0;
        r = m - 1;
        l = 0;
        while( l <= r) {
             mid = l + ( r - l) / 2;
            if(matrix[indx][mid] == target) 
                return true;
            else if(matrix[indx][mid] > target)
                r = mid - 1;
            else 
                l = mid + 1;
        }
        
        return false;
    }
};
